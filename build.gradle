plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    if (project.name != "data") {
        apply plugin: "dev.architectury.loom"

        loom {
            silentMojangMappingsLicense()
        }

        dependencies {
            minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
            mappings loom.officialMojangMappings()
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    sourceSets {
        main.resources.srcDirs = ['src/main/resources', 'src/generated/resources']
    }

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven {
            name = "Mod Menu"
            url = "https://maven.terraformersmc.com"
        }
        maven {
            name = "Thermal"
            url = "https://maven.covers1624.net/"
        }
        maven {
            name = "Ad Astra"
            url = "https://nexus.resourcefulbees.com/repository/maven-public/"
        }
        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
        }
        maven {
            name = "CurseForge"
            url = "https://www.cursemaven.com"
        }
        maven {
            url = "https://jitpack.io"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

task collectJars(type: Copy) {
    subprojects {
        if (project.name != "common" && project.name != "data") {
            def remapJar = project.tasks.named('remapJar')
            dependsOn remapJar
            from remapJar
        }
    }

    into(buildDir.toPath().resolve("libs"))
}

assemble {
    dependsOn(collectJars)
}